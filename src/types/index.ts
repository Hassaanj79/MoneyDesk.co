
export type Transaction = {
  id: string;
  userId: string;
  name: string;
  categoryId: string;
  date: string;
  amount: number;
  type: 'income' | 'expense';
  accountId: string;
  isRecurring?: boolean;
  recurrenceFrequency?: 'daily' | 'weekly' | 'monthly' | 'yearly';
  createdAt?: Date;
  isLoanGenerated?: boolean; // Flag to identify loan-generated transactions
};

export type DraftTransaction = {
  id: string;
  userId: string;
  name: string;
  categoryId: string;
  date: string;
  amount: number;
  type: 'income' | 'expense';
  accountId: string;
  status: 'pending' | 'approved' | 'rejected';
  sourceTransactionId?: string; // ID of the original recurring transaction
  sourceType: 'recurring' | 'loan_installment' | 'manual';
  createdAt: string;
  updatedAt: string;
  notes?: string;
  autoGenerated: boolean;
};

export type Budget = {
  id: string;
  userId: string;
  name: string;
  amount: number;
  period: 'weekly' | 'monthly' | 'yearly';
  categoryId: string;
  startDate: Date;
  endDate: Date;
};

export type Account = {
  id: string;
  userId: string;
  name: string;
  type: 'bank' | 'cash' | 'credit-card' | 'debit-card' | 'paypal' | 'zelle' | 'cash-app' | 'custom';
  initialBalance: number;
  balance: number; // This will be calculated on the client
};

export type Category = {
  id: string;
  userId: string;
  name: string;
  type: 'income' | 'expense';
};

export type UserProfile = {
  id: string;
  name?: string;
  email?: string;
  phone?: string;
  street?: string;
  state?: string;
  zipcode?: string;
  country?: string;
  photoURL?: string;
  currency?: string;
  timezone?: string;
  provider?: 'google' | 'apple' | 'email';
  emailVerified?: boolean;
  lastSignInTime?: string;
};

export type Loan = {
  id: string;
  userId: string;
  type: 'given' | 'taken';
  borrowerName: string;
  borrowerContact?: string;
  amount: number;
  interestRate?: number;
  startDate: string;
  dueDate: string;
  status: 'active' | 'completed' | 'overdue' | 'partially_paid';
  description?: string;
  accountId: string;
  remainingAmount: number;
  totalPaid: number;
  lastPaymentDate?: string;
  createdAt: string;
  updatedAt: string;
  // Installment fields
  isInstallment?: boolean;
  installmentCount?: number;
  installmentAmount?: number;
  installmentFrequency?: 'weekly' | 'monthly' | 'quarterly' | 'yearly';
  nextPaymentDate?: string;
};

export type LoanInstallment = {
  id: string;
  loanId: string;
  userId: string;
  amount: number;
  dueDate: string;
  paidDate?: string;
  status: 'pending' | 'paid' | 'overdue';
  installmentNumber: number;
  createdAt: string;
  updatedAt: string;
};

// Admin Panel Types
export type UserRole = 'admin' | 'user' | 'moderator';

export type ModuleAccess = {
  dashboard: boolean;
  transactions: boolean;
  loans: boolean;
  pools: boolean;
  reports: boolean;
  settings: boolean;
  accounts: boolean;
  budgets: boolean;
  categories: boolean;
};

export type AdminUser = {
  id: string;
  email: string;
  name?: string;
  role: UserRole;
  moduleAccess: ModuleAccess;
  isActive: boolean;
  createdAt: string;
  lastLoginAt?: string;
  createdBy?: string;
};

export type AdminStats = {
  totalUsers: number;
  activeUsers: number;
  newUsersThisMonth: number;
  totalTransactions: number;
  totalLoans: number;
  totalAccounts: number;
};

export type CancellationRequest = {
  id: string;
  userId: string;
  name: string;
  email: string;
  phone: string;
  reason: string;
  status: 'NEW' | 'IN_PROGRESS' | 'RETAINED' | 'CANCELLED';
  createdAt: string;
  updatedAt: string;
  metadata: {
    userAgent: string;
    ip: string;
    source: 'web' | 'ios' | 'android';
  };
  adminNotes?: string;
  adminId?: string;
};

export type ChatMessage = {
  id: string;
  conversationId: string;
  senderId: string;
  senderName: string;
  senderType: 'user' | 'admin';
  message: string;
  timestamp: string;
  isRead: boolean;
  metadata?: {
    userAgent?: string;
    ip?: string;
  };
};

export type ChatConversation = {
  id: string;
  userId: string;
  userName: string;
  userEmail: string;
  status: 'active' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  subject?: string;
  lastMessage?: string;
  lastMessageAt?: string;
  unreadCount: number;
  assignedAdminId?: string;
  assignedAdminName?: string;
  createdAt: string;
  updatedAt: string;
  tags?: string[];
  metadata?: {
    userAgent: string;
    ip: string;
    source: 'web' | 'ios' | 'android';
  };
};

export type Notification = {
  id: string;
  userId: string;
  type: 'chat_reply' | 'cancellation_request' | 'admin_alert' | 'system' | 'transaction' | 'budget' | 'account' | 'loan' | 'security' | 'profile' | 'settings' | 'report' | 'backup' | 'sync' | 'update' | 'maintenance';
  title: string;
  message: string;
  isRead: boolean;
  data?: {
    conversationId?: string;
    cancellationRequestId?: string;
    adminId?: string;
    transactionId?: string;
    budgetId?: string;
    accountId?: string;
    loanId?: string;
    reportId?: string;
    [key: string]: any;
  };
  createdAt: string;
  expiresAt?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
};

// Money Pool Types
export type MoneyPool = {
  id: string;
  name: string;
  description?: string;
  createdBy: string;
  currency: string;
  targetAmount: number;
  collectedAmount: number;
  status: 'active' | 'completed' | 'cancelled';
  poolType: 'split_bill' | 'fundraising' | 'recurring' | 'goal_saving' | 'roasca';
  visibility: 'public' | 'private';
  joinCode?: string;
  autoComplete: boolean;
  recurringPeriod?: 'weekly' | 'monthly' | 'yearly';
  startDate: string;
  endDate?: string;
  createdAt: string;
  updatedAt: string;
  participants: MoneyPoolParticipant[];
  contributions: MoneyPoolContribution[];
  activityLog: MoneyPoolActivity[];
  roscaConfig?: ROSCAConfig;
};

export type ROSCAConfig = {
  frequency: 'weekly' | 'monthly';
  contributionAmount: number;
  memberLimit: number;
  rotationMode: 'fixed_order' | 'ballot_draw';
  startDate: string;
  currentPeriod: number;
  rotationOrder: string[];
  ballotSeed?: string;
  periods: ROSCAPeriod[];
};

export type ROSCAPeriod = {
  periodIndex: number;
  dueDate: string;
  payoutDate: string;
  payoutTo: string; // memberId
  payoutAmount: number;
  contributions: {
    memberId: string;
    paidAt?: string;
    amountPaid: number;
    paymentRef?: string;
  }[];
  payoutComplete: boolean;
};

export type MoneyPoolParticipant = {
  userId: string;
  email: string;
  name: string;
  joinedAt: string;
  isActive: boolean;
  contributionAmount: number;
};

export type MoneyPoolContribution = {
  id: string;
  poolId: string;
  userId: string;
  amount: number;
  notes?: string;
  createdAt: string;
  status: 'pending' | 'confirmed' | 'reversed';
};

export type MoneyPoolActivity = {
  timestamp: string;
  type: 'created' | 'joined' | 'contributed' | 'withdrawn' | 'completed' | 'cancelled';
  userId: string;
  description: string;
};

// export * from './notification';
