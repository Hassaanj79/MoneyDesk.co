rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admin access - check email in multiple ways
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.email == 'hassyku786@gmail.com' ||
              request.auth.token.email == 'HASSYKU786@GMAIL.COM' ||
              request.auth.token.email == 'Hassyku786@gmail.com');
    }
    
    // Regular user access and admin access to users collection
    match /users/{userId} {
      // Users can read/write their own data, admins can read and write all
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && isAdmin();
      // Allow users to create their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow server-side creation for user profiles
      allow create: if request.resource.data.userId == userId;
      
      match /{subcollection=**} {
        // Users can read/write their own subcollections, admins can read/write all
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow read, write: if request.auth != null && isAdmin();
        // Allow users to create documents in their own subcollections
        allow create: if request.auth != null && request.auth.uid == userId;
        // Allow server-side API routes for admin account
        allow create: if request.auth != null && 
                        request.auth.token.email == 'hassyku786@gmail.com';
      }
    }
    
    // Public categories
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Cancellation requests
    match /cancellationRequests/{requestId} {
      // Users can create their own cancellation requests
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.userId;
      
      // Users can read their own requests, admins can read all
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || isAdmin());
      
      // Only admins can update/delete cancellation requests
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    // TOTP secrets - users can only access their own
    match /user_totp/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow admin to read all TOTP data for debugging
      allow read: if request.auth != null && isAdmin();
      // Allow read access for any authenticated user during login (temporary)
      allow read: if request.auth != null;
    }
    
    // Email OTP - users can only access their own email OTPs
    match /email_otp/{email} {
      allow read, write: if request.auth != null && request.auth.token.email == email;
    }
    
    // 2FA settings - allow server-side access for API routes
    match /user_2fa/{userId} {
      // Allow server-side creation, updates, and reading (for API routes)
      allow create, update, read: if true;
    }
    
    // 2FA codes - allow server-side access for API routes
    match /user_2fa_codes/{userId} {
      // Allow server-side creation, updates, and reading (for API routes)
      allow create, update, read: if true;
    }
    
    // 2FA backup codes - allow server-side access for API routes
    match /user_2fa_backup_codes/{userId} {
      // Allow server-side creation, updates, and reading (for API routes)
      allow create, update, read: if true;
    }
    
    // Device sessions - users can only access their own device sessions
    match /device_sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Chat conversations - users can create and read their own conversations
    match /chat_conversations/{conversationId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Chat messages - users can create messages in their conversations, admins can read all
    match /chat_messages/{messageId} {
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.senderId;
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.senderId || 
                     request.auth.uid == resource.data.userId || 
                     isAdmin());
    }
    
    // Notifications - users can read their own notifications, admins can read all
    match /notifications/{notificationId} {
      // Users can read/write their own notifications
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // Users can create notifications
      allow create: if request.auth != null;
      // Admins can read all notifications
      allow read: if request.auth != null && isAdmin();
    }
    
        // Financial notes - users can read/write their own notes, admins can read all
        match /financial_notes/{noteId} {
          // Users can read/write their own notes
          allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
          // Users can create their own notes
          allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
          // Admins can read all notes
          allow read: if request.auth != null && isAdmin();
          // Allow server-side API routes to create and read notes
          allow create, read: if request.resource.data.userId != null;
        }
        
        // User settings - users can read/write their own settings, admins can read all
        match /userSettings/{userId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null && isAdmin();
        }
        
        // Report logs - users can read/write their own report logs, admins can read all
        match /reportLogs/{logId} {
          // Users can read/write their own report logs
          allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
          // Users can create their own report logs
          allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
          // Admins can read all report logs
          allow read: if request.auth != null && isAdmin();
        }
        
        // Draft transactions - users can read/write their own draft transactions, admins can read all
        match /draftTransactions/{draftId} {
          // Users can read/write their own draft transactions
          allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
          // Users can create their own draft transactions
          allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
          // Admins can read all draft transactions
          allow read: if request.auth != null && isAdmin();
        }
        
        // Recurring transaction status - users can read/write their own statuses, admins can read all
        match /recurringTransactionStatus/{statusId} {
          // Users can read/write their own recurring transaction statuses
          allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
          // Users can create their own recurring transaction statuses
          allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
          // Admins can read all recurring transaction statuses
          allow read: if request.auth != null && isAdmin();
        }
    
    // Password reset tokens - allow server-side access for password reset flow
    match /password_reset_tokens/{email} {
      // Allow creation of reset tokens (for password reset requests)
      // Allow server-side creation without auth (for API routes)
      allow create: if true;
      
      // Allow reading reset tokens (for verification)
      // Allow server-side reading without auth (for API routes)
      allow read: if true;
      
      // Allow updating reset tokens (for marking as used)
      // Allow server-side updating without auth (for API routes)
      allow update: if true;
      
      // Allow deletion of reset tokens (for cleanup)
      // Allow server-side deletion without auth (for API routes)
      allow delete: if true;
    }

    // Email verification tokens - allow server-side access for email verification flow
    match /email_verifications/{token} {
      // Allow creation of verification tokens (for email verification requests)
      // Allow server-side creation without auth (for API routes)
      allow create: if true;
      
      // Allow reading verification tokens (for verification)
      // Allow server-side reading without auth (for API routes)
      allow read: if true;
      
      // Allow updating verification tokens (for marking as used)
      // Allow server-side updating without auth (for API routes)
      allow update: if true;
      
      // Allow deletion of verification tokens (for cleanup)
      // Allow server-side deletion without auth (for API routes)
      allow delete: if true;
    }

    // Money pools - users can create pools and read their own
    match /pools/{poolId} {
      // Users can read pools they created
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.createdBy || isAdmin());
      
      // Users can create pools
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.createdBy;
      
      // Users can update pools they created, or admins can update any
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.createdBy || isAdmin());
      
      // Users can delete pools they created, or admins can delete any
      allow delete: if request.auth != null && 
                      (request.auth.uid == resource.data.createdBy || isAdmin());
    }
    
    // Admin access to all collections for dashboard stats
    match /{document=**} {
      allow read: if request.auth != null && isAdmin();
    }
    
  }
}
